service: attendance-tracker-serverless-v3
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  profile: ServerlessUserBasic
  environment:
    usersTable: ${self:custom.usersTable}
    coursesTable: ${self:custom.coursesTable}
    tempLoginTable: ${self:custom.tempLoginTable}
    attendanceTable: ${self:custom.attendanceTable}
  ##TODO: grant fine grained permissions per lambda
  iam: #TODO: reduce these to principle of least privilege
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.usersTable}
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.tempLoginTable}

functions:
  loginUser:
    handler: handlers/loginUser/loginUser.handler
    events:
      - http:
          path: /login
          cors: true
          method: post
  registerUser:
    handler: handlers/registerUser/registerUser.handler
    events:
      - http:
          path: /register
          cors: true
          method: post
  student-addAttendance:
    handler: handlers/student-addAttendance/addAttendance.handler
    events:
      - http:
          path: /addAttendance
          cors: true
          method: post
#   teacher-verifyAttendance:
#     handler: handlers/teacher-verifyAttendance/verifyAttendance.handler
#     events:
#       - http:
#           path: /verifyAttendance
#           cors: true
#           method: post

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  frontendBucketName: attendance-tracker-bucket-19054
  s3Sync:
    - bucketName: ${self:custom.frontendBucketName}
      localDir: attendance-tracker-frontend/build/
  usersTable: attendance-tracker-users
  coursesTable: attendance-tracker-courses
  attendanceTable: attendance-tracker-student-attendances
  tempLoginTable: attendance-tracker-users-temp-login #TODO: add hashing, phase this into a Cognito user pool

resources:
  Resources:
    AttendanceTrackerBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontendBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    S3AccessPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: AttendanceTrackerBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.frontendBucketName}/*
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.frontendBucketName}.s3.amazonaws.com
              Id: AttendanceTrackerApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: "true"
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: AttendanceTrackerApp
            ForwardedValues:
              QueryString: "false"
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTable}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    AttendanceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.attendanceTable}
        AttributeDefinitions:
          - AttributeName: ID #TODO: make the primary key a combo of ID/email, course section, and date rows
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # TODO: determine if Global Secondary Index(es) is/are necessary, example below:
        # GlobalSecondaryIndexes:
        #   - IndexName: table-index
        #     KeySchema:
        #       - AttributeName: name
        #         KeyType: HASH
        #     Projection:
        #       ProjectionType: ALL
    CoursesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.coursesTable}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    TempLoginTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tempLoginTable}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
